import React, { useContext, useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Card,
  CardContent,
  Avatar,
  Button,
  Grid,
  Chip,
  Divider,
  List,
  ListItem,
  ListItemText,
  LinearProgress,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField
} from '@mui/material';
import {
  Person,
  Email,
  CalendarToday,
  Assessment,
  Edit,
  Download,
  Share,
  ExitToApp
} from '@mui/icons-material';
import { AuthContext } from '../services/auth-service';

const ProfileComponent = () => {
  const { user, logout } = useContext(AuthContext);
  const [editProfileOpen, setEditProfileOpen] = useState(false);
  const [displayName, setDisplayName] = useState(user?.displayName || '');
  const [savedResults, setSavedResults] = useState([]);

  useEffect(() => {
    // Load saved quiz results from localStorage
    const results = JSON.parse(localStorage.getItem(`quizResults_${user?.uid}`) || '[]');
    setSavedResults(results);
  }, [user]);

  const handleEditProfile = () => {
    setEditProfileOpen(true);
    setDisplayName(user?.displayName || '');
  };

  const handleSaveProfile = () => {
    // In a real app, you would update the user profile in Firebase
    console.log('Saving profile with display name:', displayName);
    setEditProfileOpen(false);
  };

  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  const downloadQuizResult = (result) => {
    const reportContent = `
VEDAVERSE - PRAKRITI ASSESSMENT REPORT
=====================================

Assessment Date: ${new Date(result.timestamp).toLocaleDateString()}
Constitution Type: ${result.constitution}
Dominant Dosha: ${result.dominantDosha}

DOSHA DISTRIBUTION:
- Vata: ${result.percentages.vata}%
- Pitta: ${result.percentages.pitta}%
- Kapha: ${result.percentages.kapha}%

This is your personalized Ayurvedic constitution analysis.
Visit VedaVerse for detailed recommendations and guidance.

Generated by VedaVerse - Divine Wellness Platform
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `VedaVerse_Prakriti_Report_${new Date(result.timestamp).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!user) {
    return (
      <Box sx={{ maxWidth: 600, mx: 'auto', mt: 4 }}>
        <Alert severity="warning">
          Please log in to view your profile.
        </Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ maxWidth: 1000, mx: 'auto' }}>
      {/* Profile Header */}
      <Paper 
        sx={{ 
          p: 4, 
          mb: 3, 
          background: 'linear-gradient(135deg, #FFF8E1 0%, #F5DEB3 100%)',
          border: '2px solid #FFD700',
          borderRadius: 3
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 3, mb: 3 }}>
          <Avatar 
            sx={{ 
              width: 80, 
              height: 80,
              background: 'linear-gradient(45deg, #8B4513 30%, #A0522D 90%)',
              fontSize: '2rem'
            }}
          >
            {user.displayName?.charAt(0) || user.email?.charAt(0) || 'üë§'}
          </Avatar>
          
          <Box sx={{ flex: 1 }}>
            <Typography 
              variant="h4" 
              gutterBottom
              sx={{
                background: 'linear-gradient(45deg, #8B4513 30%, #FFD700 90%)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                fontWeight: 'bold'
              }}
            >
              üïâÔ∏è Welcome, {user.displayName || 'Divine Soul'}! üïâÔ∏è
            </Typography>
            
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
              <Email sx={{ color: '#8B4513' }} />
              <Typography variant="body1" color="text.secondary">
                {user.email}
              </Typography>
            </Box>
            
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <CalendarToday sx={{ color: '#8B4513' }} />
              <Typography variant="body2" color="text.secondary">
                Member since {new Date(user.metadata?.creationTime).toLocaleDateString()}
              </Typography>
            </Box>
          </Box>
          
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
            <Button
              variant="outlined"
              startIcon={<Edit />}
              onClick={handleEditProfile}
              sx={{ minWidth: 140 }}
            >
              Edit Profile
            </Button>
            <Button
              variant="outlined"
              startIcon={<ExitToApp />}
              onClick={handleLogout}
              sx={{ minWidth: 140 }}
              color="error"
            >
              Logout
            </Button>
          </Box>
        </Box>
      </Paper>

      <Grid container spacing={3}>
        {/* Quiz Results History */}
        <Grid item xs={12} md={8}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom color="primary">
              üß¨ Your Prakriti Assessment History
            </Typography>
            
            {savedResults.length === 0 ? (
              <Alert severity="info">
                You haven't taken any assessments yet. Take the Prakriti Quiz to discover your constitution!
              </Alert>
            ) : (
              <List>
                {savedResults.map((result, index) => (
                  <Card key={index} sx={{ mb: 2 }}>
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                        <Box>
                          <Typography variant="h6" color="primary">
                            {result.constitution}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            Taken on {new Date(result.timestamp).toLocaleDateString()}
                          </Typography>
                        </Box>
                        
                        <Box sx={{ display: 'flex', gap: 1 }}>
                          <Button
                            size="small"
                            startIcon={<Download />}
                            onClick={() => downloadQuizResult(result)}
                          >
                            Download
                          </Button>
                          <Button
                            size="small"
                            startIcon={<Share />}
                          >
                            Share
                          </Button>
                        </Box>
                      </Box>
                      
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="body2" gutterBottom>
                          Dosha Distribution:
                        </Typography>
                        {Object.entries(result.percentages).map(([dosha, percentage]) => (
                          <Box key={dosha} sx={{ mb: 1 }}>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
                              <Typography variant="body2" sx={{ textTransform: 'capitalize' }}>
                                {dosha}
                              </Typography>
                              <Typography variant="body2">
                                {percentage}%
                              </Typography>
                            </Box>
                            <LinearProgress
                              variant="determinate"
                              value={percentage}
                              sx={{ 
                                height: 6, 
                                borderRadius: 3,
                                backgroundColor: 'rgba(139, 69, 19, 0.1)',
                                '& .MuiLinearProgress-bar': {
                                  background: dosha === result.dominantDosha 
                                    ? 'linear-gradient(45deg, #FFD700 30%, #DAA520 90%)'
                                    : 'linear-gradient(45deg, #8B4513 30%, #A0522D 90%)',
                                  borderRadius: 3
                                }
                              }}
                            />
                          </Box>
                        ))}
                      </Box>
                      
                      <Chip 
                        label={`Dominant: ${result.dominantDosha}`}
                        sx={{
                          background: 'linear-gradient(45deg, #8B4513 30%, #A0522D 90%)',
                          color: 'white',
                          fontWeight: 'bold'
                        }}
                      />
                    </CardContent>
                  </Card>
                ))}
              </List>
            )}
          </Paper>
        </Grid>

        {/* Wellness Stats */}
        <Grid item xs={12} md={4}>
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" gutterBottom color="primary">
              üåü Wellness Journey
            </Typography>
            
            <Box sx={{ mb: 3 }}>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Assessments Completed
              </Typography>
              <Typography variant="h3" color="primary">
                {savedResults.length}
              </Typography>
            </Box>
            
            <Divider sx={{ my: 2 }} />
            
            <Box sx={{ mb: 3 }}>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Days on Platform
              </Typography>
              <Typography variant="h3" color="primary">
                {Math.ceil((Date.now() - new Date(user.metadata?.creationTime)) / (1000 * 60 * 60 * 24))}
              </Typography>
            </Box>
            
            <Button 
              variant="contained" 
              fullWidth 
              href="#quiz"
              sx={{
                background: 'linear-gradient(45deg, #8B4513 30%, #A0522D 90%)',
                '&:hover': {
                  background: 'linear-gradient(45deg, #A0522D 30%, #8B4513 90%)'
                }
              }}
            >
              Take New Assessment üß¨
            </Button>
          </Paper>

          {/* Quick Actions */}
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom color="primary">
              üöÄ Quick Actions
            </Typography>
            
            <List>
              <ListItem button onClick={() => window.location.href = '#herbs'}>
                <ListItemText primary="Explore Herbs" secondary="Discover Ayurvedic herbs" />
              </ListItem>
              <ListItem button onClick={() => window.location.href = '#yoga'}>
                <ListItemText primary="Practice Yoga" secondary="Find your yoga routine" />
              </ListItem>
              <ListItem button onClick={() => window.location.href = '#doctors'}>
                <ListItemText primary="Consult Practitioners" secondary="Book consultations" />
              </ListItem>
            </List>
          </Paper>
        </Grid>
      </Grid>

      {/* Edit Profile Dialog */}
      <Dialog open={editProfileOpen} onClose={() => setEditProfileOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Edit Profile</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Display Name"
            fullWidth
            variant="outlined"
            value={displayName}
            onChange={(e) => setDisplayName(e.target.value)}
            sx={{ mt: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditProfileOpen(false)}>Cancel</Button>
          <Button onClick={handleSaveProfile} variant="contained">Save</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default ProfileComponent;